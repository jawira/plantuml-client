{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction How to install composer require jawira/plantuml-client Four methods are exposed: \\Jawira\\PlantUmlClient\\Client::generateImage \\Jawira\\PlantUmlClient\\Client::generateUrl \\Jawira\\PlantUmlClient\\Client::setServer \\Jawira\\PlantUmlClient\\Client::getServer Generate image from diagram use Jawira\\PlantUmlClient\\Client; use Jawira\\PlantUmlClient\\Format; $puml = <<<PLANTUML @startuml Bob -> Alice : hello @enduml PLANTUML; $client = new Client(); $svg = $client->generateImage($puml, Format::SVG); Load diagram form disk use Jawira\\PlantUmlClient\\Client; use Jawira\\PlantUmlClient\\Format; $puml = file_get_contents('path/to/my-diagram.puml'); // load png file $client = new Client(); $png = $client->generateImage($puml, Format::PNG); file_put_contents('path/to/my-diagram.png', $png); // save png to disk","title":"Introduction"},{"location":"index.html#introduction","text":"","title":"Introduction"},{"location":"index.html#how-to-install","text":"composer require jawira/plantuml-client Four methods are exposed: \\Jawira\\PlantUmlClient\\Client::generateImage \\Jawira\\PlantUmlClient\\Client::generateUrl \\Jawira\\PlantUmlClient\\Client::setServer \\Jawira\\PlantUmlClient\\Client::getServer","title":"How to install"},{"location":"index.html#generate-image-from-diagram","text":"use Jawira\\PlantUmlClient\\Client; use Jawira\\PlantUmlClient\\Format; $puml = <<<PLANTUML @startuml Bob -> Alice : hello @enduml PLANTUML; $client = new Client(); $svg = $client->generateImage($puml, Format::SVG);","title":"Generate image from diagram"},{"location":"index.html#load-diagram-form-disk","text":"use Jawira\\PlantUmlClient\\Client; use Jawira\\PlantUmlClient\\Format; $puml = file_get_contents('path/to/my-diagram.puml'); // load png file $client = new Client(); $png = $client->generateImage($puml, Format::PNG); file_put_contents('path/to/my-diagram.png', $png); // save png to disk","title":"Load diagram form disk"},{"location":"advanced-usage.html","text":"Available formats The following formats are supported: png (default), svg , eps , txt , and latex . Each format has its own class constant in \\Jawira\\PlantUmlClient\\Formats . You can get all available formats with \\Jawira\\PlantUmlClient\\Formats::ALL . Customizing PlantUML server Currently, PlantUML client uses the official server: http://www.plantuml.com/plantuml . You can set your own PlantUML server -for example for privacy purposes. Set the server on instantiation: use Jawira\\PlantUmlClient\\Client; $client = new Client('http://custom-server.com/plantuml'); Or, set the server after instantiation: use Jawira\\PlantUmlClient\\Client; $client = new Client(); // using default server $client->setServer('http://custom-server.com/plantuml'); TIP: you can find plenty of open PlantUML servers with a simple search . Generating image's url This library only provides the minimum functionality to convert diagrams into images. If you need to do something more fancy (eg. async), you can retrieve the image's url and do it yourself. Generating the image's url can also be useful for websites, for example. use Jawira\\PlantUmlClient\\Client; use Jawira\\PlantUmlClient\\Format; $puml = <<<PLANTUML @startuml Bob -> Alice : hello @enduml PLANTUML; $client = new Client(); $url = $client->generateUrl($puml, Format::PNG); echo \"<img src='$url'>\";","title":"Advanced usage"},{"location":"advanced-usage.html#available-formats","text":"The following formats are supported: png (default), svg , eps , txt , and latex . Each format has its own class constant in \\Jawira\\PlantUmlClient\\Formats . You can get all available formats with \\Jawira\\PlantUmlClient\\Formats::ALL .","title":"Available formats"},{"location":"advanced-usage.html#customizing-plantuml-server","text":"Currently, PlantUML client uses the official server: http://www.plantuml.com/plantuml . You can set your own PlantUML server -for example for privacy purposes. Set the server on instantiation: use Jawira\\PlantUmlClient\\Client; $client = new Client('http://custom-server.com/plantuml'); Or, set the server after instantiation: use Jawira\\PlantUmlClient\\Client; $client = new Client(); // using default server $client->setServer('http://custom-server.com/plantuml'); TIP: you can find plenty of open PlantUML servers with a simple search .","title":"Customizing PlantUML server"},{"location":"advanced-usage.html#generating-images-url","text":"This library only provides the minimum functionality to convert diagrams into images. If you need to do something more fancy (eg. async), you can retrieve the image's url and do it yourself. Generating the image's url can also be useful for websites, for example. use Jawira\\PlantUmlClient\\Client; use Jawira\\PlantUmlClient\\Format; $puml = <<<PLANTUML @startuml Bob -> Alice : hello @enduml PLANTUML; $client = new Client(); $url = $client->generateUrl($puml, Format::PNG); echo \"<img src='$url'>\";","title":"Generating image's url"},{"location":"well-known-issues.html","text":"Incomplete diagrams Default PlantUml server ( https://www.plantuml.com/plantuml ) cannot handle huge diagrams. If you have problems it is suggested to use your own PlantUml server ( https://github.com/plantuml/plantuml-server ). Additionally, you have to set PLANTUML_LIMIT_SIZE environment variable in your server, otherwise your diagram will be cropped. $ docker run -d -p 8080 :8080 -e PLANTUML_LIMIT_SIZE = 10000 plantuml/plantuml-server Your PlantUml server is listening at http://localhost:8080 . For example: http://localhost:8080/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000 use Jawira\\PlantUmlClient\\Client; $client = new Client('http://localhost:8080'); Or using appropriate setter: use Jawira\\PlantUmlClient\\Client; $client = new Client(); $client->setServer('http://localhost:8080');","title":"Well known issues"},{"location":"well-known-issues.html#incomplete-diagrams","text":"Default PlantUml server ( https://www.plantuml.com/plantuml ) cannot handle huge diagrams. If you have problems it is suggested to use your own PlantUml server ( https://github.com/plantuml/plantuml-server ). Additionally, you have to set PLANTUML_LIMIT_SIZE environment variable in your server, otherwise your diagram will be cropped. $ docker run -d -p 8080 :8080 -e PLANTUML_LIMIT_SIZE = 10000 plantuml/plantuml-server Your PlantUml server is listening at http://localhost:8080 . For example: http://localhost:8080/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000 use Jawira\\PlantUmlClient\\Client; $client = new Client('http://localhost:8080'); Or using appropriate setter: use Jawira\\PlantUmlClient\\Client; $client = new Client(); $client->setServer('http://localhost:8080');","title":"Incomplete diagrams"}]}